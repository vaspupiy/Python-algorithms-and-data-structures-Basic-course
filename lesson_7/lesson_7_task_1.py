# 1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
# заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# ● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# ● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

from random import randrange


def revers_bubble_sort(arr):
    """Сортирует по убыванию массив целых чисел методом пузырьков"""
    k = len(arr) - 1  # -1: для внутреннего цикла, что бы не выйти за граници массива
    for _ in range(len(arr)):
        stop = True  # для естественности поведения
        for i in range(k):
            if arr[i] < arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                stop = False
        if stop:  # из методички: если не было перестановок во внутреннем цикле, то массив отсортирован...
            return
        k -= 1  # Последний "припаркованный" элемент минимален, его уже нет смысла проверять
    return


if __name__ == '__main__':
    SIZE = 10
    N_MIN = -100
    N_MAX = 100
    array = [randrange(N_MIN, N_MAX) for _ in range(SIZE)]  # N_MAX не включительно
    print('\nИсходный массив :\n', array)
    revers_bubble_sort(array)
    print('\nОтсортитрованный массив: \n', array)
